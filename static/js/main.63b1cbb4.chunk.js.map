{"version":3,"sources":["components/ColorfulMsg.tsx","components/CountButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorfulMsg","props","style","color","children","CountButton","state","count","this","setState","onClick","handleClick","bind","React","Component","msgStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAMeA,G,YAJK,SAACC,GACnB,OAAO,uBAAGC,MAAO,CAAEC,MAAOF,EAAME,QAAUF,EAAMG,Y,mCCwBnCC,E,YApBX,WAAYJ,GAAc,IAAD,8BACrB,4CAAMA,KACDK,MAAQ,CACTC,MAAO,GAHU,E,2EAQrBC,KAAKC,UAAS,SAACH,EAAOL,GAClB,MAAO,CACHM,MAAOD,EAAMC,MAAQ,Q,+BAM7B,OAAO,4BAAQG,QAAWF,KAAKG,YAAYC,KAAKJ,OAAQA,KAAKF,MAAMC,W,GAjBjDM,IAAMC,WCA1BC,EAAW,CACfZ,MAAO,QAeMa,EAZH,WACV,OACE,oCACE,wBAAId,MAAOa,GAAX,uCACA,kBAAC,EAAD,CAAaZ,MAAQ,QAArB,mDACA,kBAAC,EAAD,CAAaA,MAAQ,SAArB,mDACA,kBAAC,EAAD,CAAaA,MAAQ,OAArB,mDACA,kBAAC,EAAD,QCLcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.63b1cbb4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ColorfulMsg = (props: any) => {\n  return <p style={{ color: props.color }}>{props.children}</p>\n};\n\nexport default ColorfulMsg;\n","import React from \"react\";\n\ninterface IState {\n    count: number;\n};\n\nclass CountButton extends React.Component<{}, IState> {\n    constructor(props: any ) {\n        super(props);\n        this.state = {\n            count: 0,\n        };\n    }\n\n    handleClick() {\n        this.setState((state, props) => {\n            return {\n                count: state.count + 1\n            };\n        });\n    };\n\n    render() {\n        return <button onClick = {this.handleClick.bind(this)}>{this.state.count}</button>;\n    }\n}\n\nexport default CountButton;","import React from 'react';\nimport './App.css';\n\nimport ColorfulMsg from \"./components/ColorfulMsg\";\nimport CountButton from \"./components/CountButton\";\n\nconst msgStyle = {\n  color: 'blue'\n};\n\nconst App = () => {\n  return (\n    <>\n      <h1 style={msgStyle}>はじめてのReact</h1>\n      <ColorfulMsg color = \"blue\">Reactは難しくないよ</ColorfulMsg>\n      <ColorfulMsg color = \"green\">Reactは難しくないよ</ColorfulMsg>\n      <ColorfulMsg color = \"red\">Reactは難しくないよ</ColorfulMsg>\n      <CountButton />\n    </>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}